import os
import time

from PyQt5 import QtWidgets
from PyQt5.QtWidgets import QMainWindow, QFileDialog

from PE_main import run_pe_main
from interface import Ui_MainWindow
from signdetector import get_hash, check_hash
from system_info import *


class App(QMainWindow, Ui_MainWindow):
    def __init__(self) -> None:
        super().__init__()
        self.filelist = []
        self.setupUi(self)

        self.setWindowTitle("Antivirus")
        self.os_label.setText(self.os_label.text() + get_os_name())
        self.num_cores_label.setText(self.num_cores_label.text() + get_proc_info())
        self.user_name_label.setText(self.user_name_label.text() + get_user_name())

        self.progressBar.setMinimum(0)

        self.system_btn.clicked.connect(self.switch_to_system_page)
        self.scanner_btn.clicked.connect(self.switch_to_scanner_page)
        self.settings_btn.clicked.connect(self.switch_to_settings_page)

        self.choose_files_btn.clicked.connect(self.open_choose_files)
        self.start_btn.clicked.connect(self.start_scanning)

        self.table_scan_files.setColumnWidth(0, 360)


    def loaddata(self, files):
        row = 0
        for i in files[0]:
            self.filelist.append({"path": i, "result": "-"})
        self.table_scan_files.setRowCount(len(self.filelist))
        for f in self.filelist:
            self.table_scan_files.setItem(row, 0, QtWidgets.QTableWidgetItem(f["path"]))
            row += 1

    def switch_to_system_page(self):
        self.stackedWidget.setCurrentIndex(0)

    def switch_to_scanner_page(self):
        self.stackedWidget.setCurrentIndex(1)

    def switch_to_settings_page(self):
        self.stackedWidget.setCurrentIndex(2)

    def open_choose_files(self):
        files = QFileDialog.getOpenFileNames()
        if not files:
            return
        self.loaddata(files)

    def start_scanning(self):
        if len(self.filelist) == 0:
            return

        self.progressBar.setMaximum(len(self.filelist))
        row = 0
        for file in self.filelist:
            f = file["path"].replace("/", "\\")
            hash_file = get_hash(f)
            if check_hash(hash_file):
                file["result"] = "malicious"
            else:
                file["result"] = run_pe_main(f)

            self.table_scan_files.setItem(row, 1, QtWidgets.QTableWidgetItem(file["result"]))
            row += 1
            self.progressBar.setValue(row)

        self.filelist.clear()